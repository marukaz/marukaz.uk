---
import Layout from '../layouts/BasicLayout.astro';
---

<Layout
	title="カニカニパニック"
	description="ココナッツを集めて、アライグマを避けるゲーム"
>
    <!-- <script src="https://cdn.tailwindcss.com"></script> -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            touch-action: manipulation; /* ダブルタップズームを無効化 */
        }
        canvas {
            background-color: #f0e68c; /* 砂浜のような色 */
            display: block;
            margin: 0 auto;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 600px;
            height: auto;
        }
        .modal {
            display: none; /* 初期状態では非表示 */
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 400px;
            text-align: center;
            border-radius: 0.5rem;
        }
        .button {
            background-color: #4CAF50; /* 緑 */
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 0.5rem;
            transition: background-color 0.3s;
        }
        .button:hover {
            background-color: #45a049;
        }
        .score-board {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }
        /* タッチ操作エリアのスタイル */
        .touch-controls {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 600px; /* canvasの最大幅に合わせる */
            margin: 10px auto 0;
        }
        .touch-button {
            background-color: #3b82f6; /* 青 */
            color: white;
            padding: 15px 0; /* 縦に長く */
            width: 48%; /* 幅をほぼ半分に */
            text-align: center;
            font-size: 1.2rem;
            border-radius: 0.5rem;
            cursor: pointer;
            user-select: none; /* テキスト選択を防ぐ */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .touch-button:active {
            background-color: #2563eb;
        }

        /* モバイルでの表示を改善 */
        @media (max-width: 640px) {
            .modal-content {
                width: 90%;
                margin-top: 30%;
            }
            .button {
                padding: 12px 28px;
                font-size: 14px;
            }
            .score-board {
                font-size: 1.25rem;
            }
            .touch-button {
                padding: 20px 0; /* タッチしやすく */
                font-size: 1.5rem;
            }
        }
    </style>

    <div class="bg-gray-100 flex flex-col items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-2xl text-center mb-4">
        <div class="flex justify-center gap-4 text-gray-600 text-lg mb-2">
            <div id="todayHighScore">今日のハイスコア: 0</div>
            <div id="allTimeHighScore">歴代最高スコア: 0</div>
        </div>
        <p class="text-gray-700 mt-2">ココナッツ🥥を集めて、ラッコ🦦を避けよう！</p>
        <div id="scoreBoard" class="score-board mt-2">スコア: 0</div>
    </div>

    <div id="startScreen" class="text-center">
        <button id="startButton" class="button text-xl">スタート</button>
    </div>

    <canvas id="gameCanvas" style="display: none;"></canvas>

    <div id="touchControls" class="touch-controls mt-4" style="display: none;">
        <div id="leftButton" class="touch-button">◀ 左</div>
        <div id="rightButton" class="touch-button">右 ▶</div>
    </div>

    <div id="gameOverModal" class="modal">
        <div class="modal-content bg-white shadow-lg rounded-lg p-6">
            <h2 id="gameOverTitle" class="text-2xl font-bold mb-4">ゲームオーバー！</h2>
            <p id="finalScore" class="text-lg mb-4">最終スコア: 0</p>
            <div class="flex gap-4 justify-center">
                <button id="restartButton" class="button">もう一度遊ぶ</button>
                <button id="quitButton" class="button" style="background-color: #dc2626;">やめる</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement | null;
            const scoreBoard = document.getElementById('scoreBoard') as HTMLDivElement | null;
            const gameOverModal = document.getElementById('gameOverModal') as HTMLDivElement | null;
            const finalScoreDisplay = document.getElementById('finalScore') as HTMLParagraphElement | null;
            const restartButton = document.getElementById('restartButton') as HTMLButtonElement | null;
            const quitButton = document.getElementById('quitButton') as HTMLButtonElement | null;
            const leftButton = document.getElementById('leftButton') as HTMLDivElement | null;
            const rightButton = document.getElementById('rightButton') as HTMLDivElement | null;
            const touchControls = document.getElementById('touchControls') as HTMLDivElement | null;
            const startScreen = document.getElementById('startScreen') as HTMLDivElement | null;
            const startButton = document.getElementById('startButton') as HTMLButtonElement | null;
            const todayHighScore = document.getElementById('todayHighScore') as HTMLDivElement | null;
            const allTimeHighScore = document.getElementById('allTimeHighScore') as HTMLDivElement | null;

            if (!canvas || !scoreBoard || !gameOverModal || !finalScoreDisplay || !restartButton || !quitButton || !leftButton || !rightButton || !touchControls || !startScreen || !startButton || !todayHighScore || !allTimeHighScore) {
                console.error("必要な要素がページに見つかりません。");
                return;
            }

            const ctx = canvas.getContext('2d');
            if (!ctx) {
                console.error("2Dコンテキストの取得に失敗しました。");
                return;
            }

            let score = 0;
            let gameRunning = false;
            let gameStarted = false;
            let animationFrameId: number | undefined;

            canvas.width = 600;
            canvas.height = 390;
            touchControls.style.maxWidth = `600px`;

            const crab = {
                x: 50,
                y: 0, 
                width: 40,
                height: 40,
                speed: 40,
                emoji: '🦀',
                fontSize: 40
            };

            interface Item {
                x: number;
                y: number;
                width: number;
                height: number;
                speed: number;
                emoji: string;
                type: 'coconut' | 'otter';
                points: number;
                fontSize: number;
            }

            const items: Item[] = [];
            const itemTypes = [
                { emoji: '🥥', type: 'coconut', points: 1, width: 30, height: 30, fontSize: 30 },
                { emoji: '🦦', type: 'otter', points: -1, width: 30, height: 30, fontSize: 40 }
            ] as const;
            let itemSpawnInterval = 1500;
            let lastItemSpawnTime = 0;

            async function loadScores() {
                try {
                    const response = await fetch('/api/scores');
                    if (!response.ok) {
                        throw new Error('スコアの取得に失敗しました。');
                    }
                    const scores = (await response.json()) as {
                        current_score: number;
                        high_score: number;
                    };
                    if (todayHighScore) {
                        todayHighScore.textContent = `今日のハイスコア: ${scores.current_score}`;
                    }
                    if (allTimeHighScore) {
                        allTimeHighScore.textContent = `歴代最高スコア: ${scores.high_score}`;
                    }
                } catch (error) {
                    console.error(error);
                }
            }

            async function sendScore(newScore: number) {
                try {
                    await fetch('/api/scores', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ score: newScore }),
                    });
                } catch (error) {
                    console.error('スコアの送信に失敗しました。', error);
                }
            }

            function startGame() {
                if (!startScreen || !canvas || !touchControls) return;
                startScreen.style.display = 'none';
                canvas.style.display = 'block';
                touchControls.style.display = 'flex';
                gameStarted = true;
                init();
            }

            function quitGame() {
                gameRunning = false;
                gameStarted = false;
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                }
                if (!gameOverModal || !canvas || !touchControls || !startScreen) return;
                gameOverModal.style.display = 'none';
                canvas.style.display = 'none';
                touchControls.style.display = 'none';
                startScreen.style.display = 'block';
                score = 0;
                updateScoreBoard();
                loadScores();
            }

            function init() {
                if (!canvas || !gameOverModal) return;
                crab.x = canvas.width / 2 - crab.width / 2;
                crab.y = canvas.height - crab.height - 10;
                score = 0;
                items.length = 0;
                gameRunning = true;
                updateScoreBoard();
                gameOverModal.style.display = 'none';
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                }
                lastItemSpawnTime = Date.now(); 
                itemSpawnInterval = 600; 
                gameLoop();
            }

            function updateScoreBoard() {
                if (scoreBoard) {
                    scoreBoard.textContent = `スコア: ${score}`;
                }
            }

            function spawnItem() {
                if (!canvas) return;
                const now = Date.now();
                if (now - lastItemSpawnTime < itemSpawnInterval) {
                    return;
                }
                lastItemSpawnTime = now;

                const typeIndex = Math.random() < 0.7 ? 0 : 1;
                const itemDetail = itemTypes[typeIndex];
                const item: Item = {
                    x: Math.random() * (canvas.width - itemDetail.width),
                    y: -itemDetail.height,
                    width: itemDetail.width,
                    height: itemDetail.height,
                    speed: 2 + Math.random() * 3,
                    emoji: itemDetail.emoji,
                    type: itemDetail.type,
                    points: itemDetail.points,
                    fontSize: itemDetail.fontSize
                };
                items.push(item);

                if (itemSpawnInterval > 100) {
                    itemSpawnInterval -= 10; 
                }
            }

            function updateItems() {
                if (!canvas) return;
                for (let i = items.length - 1; i >= 0; i--) {
                    const item = items[i];
                    item.y += item.speed;

                    if (item.y > canvas.height) {
                        items.splice(i, 1);
                        continue;
                    }

                    if (
                        crab.x < item.x + item.width &&
                        crab.x + crab.width > item.x &&
                        crab.y < item.y + item.height &&
                        crab.y + crab.height > item.y
                    ) {
                        if (item.type === 'coconut') {
                            score += item.points;
                            updateScoreBoard();
                            items.splice(i, 1);
                        } else if (item.type === 'otter') {
                            gameOver();
                            return; 
                        }
                    }
                    drawEmoji(item.emoji, item.x, item.y + item.height, item.fontSize);
                }
            }
            
            function drawEmoji(emoji: string, x: number, y: number, fontSize: number) {
                if (!ctx) return;
                ctx.font = `${fontSize}px Arial`;
                ctx.textBaseline = 'bottom';
                ctx.fillText(emoji, x, y);
            }

            function drawCrab() {
                drawEmoji(crab.emoji, crab.x, crab.y + crab.height, crab.fontSize);
            }

            async function gameOver() {
                gameRunning = false;
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                }
                if (finalScoreDisplay) {
                    finalScoreDisplay.textContent = `最終スコア: ${score}`;
                }
                if (gameOverModal) {
                    gameOverModal.style.display = 'flex';
                }
                await sendScore(score);
                await loadScores();
            }

            function gameLoop() {
                if (!gameRunning || !canvas || !ctx) return;

                ctx.clearRect(0, 0, canvas.width, canvas.height); 

                spawnItem();
                updateItems(); 
                drawCrab();   
                
                if (gameRunning) {
                    animationFrameId = requestAnimationFrame(gameLoop);
                }
            }

            document.addEventListener('keydown', (e) => {
                if (!gameRunning || !gameStarted || !canvas) return;
                if (e.key === 'ArrowLeft' || e.key.toLowerCase() === 'a') {
                    crab.x -= crab.speed;
                    if (crab.x < 0) crab.x = 0;
                } else if (e.key === 'ArrowRight' || e.key.toLowerCase() === 'd') {
                    crab.x += crab.speed;
                    if (crab.x + crab.width > canvas.width) {
                        crab.x = canvas.width - crab.width;
                    }
                }
            });

            function moveCrabLeft() {
                if (!gameRunning || !gameStarted) return;
                crab.x -= crab.speed;
                if (crab.x < 0) crab.x = 0;
            }

            function moveCrabRight() {
                if (!gameRunning || !gameStarted || !canvas) return;
                crab.x += crab.speed;
                if (crab.x + crab.width > canvas.width) {
                    crab.x = canvas.width - crab.width;
                }
            }
            
            leftButton.addEventListener('touchstart', (e) => { e.preventDefault(); moveCrabLeft(); });
            leftButton.addEventListener('click', (e) => { e.preventDefault(); moveCrabLeft(); });

            rightButton.addEventListener('touchstart', (e) => { e.preventDefault(); moveCrabRight(); });
            rightButton.addEventListener('click', (e) => { e.preventDefault(); moveCrabRight(); });

            canvas.addEventListener('touchstart', (e) => {
                e.preventDefault();
                if (!gameRunning || !gameStarted || !canvas) return;
                const touchX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                if (touchX < canvas.width / 2) {
                    moveCrabLeft();
                } else {
                    moveCrabRight();
                }
            });

            startButton.addEventListener('click', () => {
                startGame();
            });

            restartButton.addEventListener('click', () => {
                init();
            });

            quitButton.addEventListener('click', () => {
                quitGame();
            });
            
            updateScoreBoard();
            loadScores();
        });
    </script>
    
    </div>
</Layout>