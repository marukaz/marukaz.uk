---
import Layout from '../layouts/BasicLayout.astro';
---

<Layout
	title="カニカニパニック"
	description="ココナッツを集めて、アライグマを避けるゲーム"
>
    <!-- <script src="https://cdn.tailwindcss.com"></script> -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            touch-action: manipulation; /* ダブルタップズームを無効化 */
        }
        canvas {
            background-color: #f0e68c; /* 砂浜のような色 */
            display: block;
            margin: 0 auto;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 600px;
            height: auto;
        }
        .modal {
            display: none; /* 初期状態では非表示 */
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 400px;
            text-align: center;
            border-radius: 0.5rem;
        }
        .button {
            background-color: #4CAF50; /* 緑 */
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 0.5rem;
            transition: background-color 0.3s;
        }
        .button:hover {
            background-color: #45a049;
        }
        .score-board {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }
        /* タッチ操作エリアのスタイル */
        .touch-controls {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 600px; /* canvasの最大幅に合わせる */
            margin: 10px auto 0;
        }
        .touch-button {
            background-color: #3b82f6; /* 青 */
            color: white;
            padding: 15px 0; /* 縦に長く */
            width: 48%; /* 幅をほぼ半分に */
            text-align: center;
            font-size: 1.2rem;
            border-radius: 0.5rem;
            cursor: pointer;
            user-select: none; /* テキスト選択を防ぐ */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .touch-button:active {
            background-color: #2563eb;
        }

        /* モバイルでの表示を改善 */
        @media (max-width: 640px) {
            .modal-content {
                width: 90%;
                margin-top: 30%;
            }
            .button {
                padding: 12px 28px;
                font-size: 14px;
            }
            .score-board {
                font-size: 1.25rem;
            }
            .touch-button {
                padding: 20px 0; /* タッチしやすく */
                font-size: 1.5rem;
            }
        }
    </style>

    <div class="bg-gray-100 flex flex-col items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-2xl text-center mb-4">
        <p class="text-gray-700 mt-2">ココナッツ🥥を集めて、ラッコ🦦を避けよう！</p>
        <div id="scoreBoard" class="score-board mt-2">スコア: 0</div>
    </div>

    <div id="startScreen" class="text-center">
        <button id="startButton" class="button text-xl">スタート</button>
    </div>

    <canvas id="gameCanvas" style="display: none;"></canvas>

    <div id="touchControls" class="touch-controls mt-4" style="display: none;">
        <div id="leftButton" class="touch-button">◀ 左</div>
        <div id="rightButton" class="touch-button">右 ▶</div>
    </div>

    <div id="gameOverModal" class="modal">
        <div class="modal-content bg-white shadow-lg rounded-lg p-6">
            <h2 id="gameOverTitle" class="text-2xl font-bold mb-4">ゲームオーバー！</h2>
            <p id="finalScore" class="text-lg mb-4">最終スコア: 0</p>
            <div class="flex gap-4 justify-center">
                <button id="restartButton" class="button">もう一度遊ぶ</button>
                <button id="quitButton" class="button" style="background-color: #dc2626;">やめる</button>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreBoard = document.getElementById('scoreBoard');
        const gameOverModal = document.getElementById('gameOverModal');
        const finalScoreDisplay = document.getElementById('finalScore');
        const restartButton = document.getElementById('restartButton');
        const quitButton = document.getElementById('quitButton');
        const leftButton = document.getElementById('leftButton');
        const rightButton = document.getElementById('rightButton');
        const touchControls = document.getElementById('touchControls');
        const startScreen = document.getElementById('startScreen');
        const startButton = document.getElementById('startButton');

        let score = 0;
        let gameRunning = false;
        let gameStarted = false;
        let animationFrameId;

        // キャンバスの解像度を固定
        canvas.width = 600;
        canvas.height = 390;
        touchControls.style.maxWidth = `600px`;
        

        // キャラクター設定
        const crab = {
            x: 50,
            y: 0, 
            width: 50,
            height: 40,
            speed: 50,
            emoji: '🦀',
            fontSize: 40
        };

        const items = [];
        const itemTypes = [
            { emoji: '🥥', type: 'coconut', points: 1, width: 30, height: 30, fontSize: 30 },
            { emoji: '🦦', type: 'otter', points: -1, width: 30, height: 30, fontSize: 40 }
        ];
        let itemSpawnInterval = 1500;
        let lastItemSpawnTime = 0;

        // ゲーム開始処理
        function startGame() {
            startScreen.style.display = 'none';
            canvas.style.display = 'block';
            touchControls.style.display = 'flex';
            gameStarted = true;
            init();
        }

        // ゲーム終了処理
        function quitGame() {
            gameRunning = false;
            gameStarted = false;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            gameOverModal.style.display = 'none';
            canvas.style.display = 'none';
            touchControls.style.display = 'none';
            startScreen.style.display = 'block';
            score = 0;
            updateScoreBoard();
        }

        // 初期化処理
        function init() {
            crab.x = canvas.width / 2 - crab.width / 2;
            crab.y = canvas.height - crab.height - 10;
            score = 0;
            items.length = 0;
            gameRunning = true;
            updateScoreBoard();
            gameOverModal.style.display = 'none';
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            lastItemSpawnTime = Date.now(); 
            itemSpawnInterval = 600; 
            gameLoop();
        }

        // スコア表示更新
        function updateScoreBoard() {
            scoreBoard.textContent = `スコア: ${score}`;
        }

        // アイテム（ココナッツ、アライグマ）を生成
        function spawnItem() {
            const now = Date.now();
            if (now - lastItemSpawnTime < itemSpawnInterval) {
                return;
            }
            lastItemSpawnTime = now;

            const typeIndex = Math.random() < 0.7 ? 0 : 1;
            const itemDetail = itemTypes[typeIndex];
            const item = {
                x: Math.random() * (canvas.width - itemDetail.width),
                y: -itemDetail.height,
                width: itemDetail.width,
                height: itemDetail.height,
                speed: 2 + Math.random() * 3,
                emoji: itemDetail.emoji,
                type: itemDetail.type,
                points: itemDetail.points,
                fontSize: itemDetail.fontSize
            };
            items.push(item);

            if (itemSpawnInterval > 100) {
                itemSpawnInterval -= 10; 
            }
        }

        // アイテムの移動と描画
        function updateItems() {
            for (let i = items.length - 1; i >= 0; i--) {
                const item = items[i];
                item.y += item.speed;

                if (item.y > canvas.height) {
                    items.splice(i, 1);
                    continue;
                }

                if (
                    crab.x < item.x + item.width &&
                    crab.x + crab.width > item.x &&
                    crab.y < item.y + item.height &&
                    crab.y + crab.height > item.y
                ) {
                    if (item.type === 'coconut') {
                        score += item.points;
                        updateScoreBoard();
                        items.splice(i, 1);
                    } else if (item.type === 'otter') {
                        gameOver();
                        return; 
                    }
                }
                drawEmoji(item.emoji, item.x, item.y + item.height, item.fontSize);
            }
        }
        
        // 絵文字描画関数
        function drawEmoji(emoji, x, y, fontSize) {
            ctx.font = `${fontSize}px Arial`;
            ctx.textBaseline = 'bottom';
            ctx.fillText(emoji, x, y);
        }

        // カニの描画
        function drawCrab() {
            drawEmoji(crab.emoji, crab.x, crab.y + crab.height, crab.fontSize);
        }

        // ゲームオーバー処理
        function gameOver() {
            gameRunning = false;
            cancelAnimationFrame(animationFrameId);
            finalScoreDisplay.textContent = `最終スコア: ${score}`;
            gameOverModal.style.display = 'flex';
        }

        // ゲームループ
        function gameLoop() {
            if (!gameRunning) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height); 

            spawnItem();
            updateItems(); 
            drawCrab();   
            
            if (gameRunning) {
                animationFrameId = requestAnimationFrame(gameLoop);
            }
        }

        // キーボード操作
        document.addEventListener('keydown', (e) => {
            if (!gameRunning || !gameStarted) return;
            if (e.key === 'ArrowLeft' || e.key.toLowerCase() === 'a') {
                crab.x -= crab.speed;
                if (crab.x < 0) crab.x = 0;
            } else if (e.key === 'ArrowRight' || e.key.toLowerCase() === 'd') {
                crab.x += crab.speed;
                if (crab.x + crab.width > canvas.width) {
                    crab.x = canvas.width - crab.width;
                }
            }
        });

        // タッチ操作の共通処理
        function moveCrabLeft() {
            if (!gameRunning || !gameStarted) return;
            crab.x -= crab.speed;
            if (crab.x < 0) crab.x = 0;
        }

        function moveCrabRight() {
            if (!gameRunning || !gameStarted) return;
            crab.x += crab.speed;
            if (crab.x + crab.width > canvas.width) {
                crab.x = canvas.width - crab.width;
            }
        }
        
        // タッチボタン
        leftButton.addEventListener('touchstart', (e) => { e.preventDefault(); moveCrabLeft(); });
        leftButton.addEventListener('click', (e) => { e.preventDefault(); moveCrabLeft(); });

        rightButton.addEventListener('touchstart', (e) => { e.preventDefault(); moveCrabRight(); });
        rightButton.addEventListener('click', (e) => { e.preventDefault(); moveCrabRight(); });

        // キャンバスへのタッチ操作 (左右分割)
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (!gameRunning || !gameStarted) return;
            const touchX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
            if (touchX < canvas.width / 2) {
                moveCrabLeft();
            } else {
                moveCrabRight();
            }
        });

        // ボタンイベントリスナー
        startButton.addEventListener('click', () => {
            startGame();
        });

        restartButton.addEventListener('click', () => {
            init();
        });

        quitButton.addEventListener('click', () => {
            quitGame();
        });
        
        // 初期化（ゲームは開始しない）
        // Astroの<script>タグはデフォルトでページのコンテンツが読み込まれた後に実行されるため、
        // window.onload は不要です。
        updateScoreBoard();

    </script>
    
    </div>
</Layout>